{
	"info": {
		"name": "rsa",
		"_postman_id": "5ff57ea6-a5fb-853f-e82d-6920f3adc4ca",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pre-request脚本测试 md5 lodash",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b63090a7-cbd8-4d98-b8fa-741f9e172756",
						"type": "text/javascript",
						"exec": [
							"",
							"var md5Password = CryptoJS.MD5(\"123\").toString().toUpperCase();",
							"console.log(md5Password);",
							"var te = [1, 2, 3, 4];",
							"",
							"var _ = require('lodash');",
							"var de = _.reverse(te);",
							"console.log(de);",
							"",
							"window = {};",
							"navigator = {};"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "17b2a1f6-b0ef-40b9-a972-5ecb01285f2b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "message",
							"value": "{{encryptMessage}}",
							"description": "",
							"type": "text"
						},
						{
							"key": "cPub",
							"value": "{{cPub}}",
							"description": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/rsa/rest/api/v1/send",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rsa",
						"rest",
						"api",
						"v1",
						"send"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "rsa pre-request脚本测试 jsrsasign",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03926b73-be50-44c7-abcd-6e95502957b9",
						"type": "text/javascript",
						"exec": [
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8080/rsa/rest/api/v1/init',",
							"    method: \"POST\",",
							"}, function (err, res) {",
							"    console.log(res.json());",
							"    console.log('-------------------- 华丽的分割线 请求前 -----------------------');",
							"    pm.sendRequest({",
							"        url: 'https://cdn.bootcss.com/jsrsasign/8.0.5/jsrsasign-all-min.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"",
							"        var jsrsasign = res.stream.toString();",
							"        // 执行jsrsasign，加载第三方库",
							"        eval(jsrsasign);",
							"        ",
							"        // RSAKey的扩展函数",
							"        RSAKey.prototype.getPEM = function(key, pemHeader) {",
							"          return hextopem(b64nltohex(key), pemHeader);",
							"        };",
							"",
							"        RSAKey.prototype.encryptB64 = function (text) {",
							"          return hextob64(this.encrypt(text));",
							"        };",
							"        ",
							"        RSAKey.prototype.decryptB64 = function (text) {",
							"          return this.decrypt(b64tohex(text));",
							"        };",
							"        ",
							"        RSAKey.prototype.getPrivateBaseKey = function () {",
							"          var keyPem = KEYUTIL.getPEM(this, \"PKCS8PRV\");",
							"          return pemtohex(keyPem);",
							"        };",
							"        ",
							"        RSAKey.prototype.getPrivateBaseKeyB64 = function () {",
							"          return hextob64(this.getPrivateBaseKey());",
							"        };",
							"        ",
							"        RSAKey.prototype.getPublicBaseKey = function () {",
							"          var keyPem = KEYUTIL.getPEM(this, \"PKCS8PUB\");",
							"          return pemtohex(keyPem);",
							"        };",
							"        ",
							"        RSAKey.prototype.getPublicBaseKeyB64 = function () {",
							"          return hextob64(this.getPublicBaseKey());",
							"        };",
							"        ",
							"        RSAKey.prototype.readPKCS8PrvKeyFromB64 = function (prvKeyB64) {",
							"          var prvKeyPem = this.getPEM(prvKeyB64, \"PRIVATE KEY\");",
							"          this.readPKCS8PrvKeyHex(pemtohex(prvKeyPem));",
							"        };",
							"        ",
							"        RSAKey.prototype.readPKCS8PubKeyFromB64 = function (pubKeyB64) {",
							"          var pubKeyPem = this.getPEM(pubKeyB64, \"PUBLIC KEY\");",
							"          this.readPKCS8PubKeyHex(pemtohex(pubKeyPem));",
							"        };",
							"        ",
							"        RSAKey.readPKCS9KeypairFromB64 = function(prvKeyB64, pubKeyB64) {",
							"          var prvKey = new RSAKey();",
							"          prvKey.readPKCS8PrvKeyFromB64(prvKeyB64);",
							"          var pubKey = new RSAKey();",
							"          pubKey.readPKCS8PubKeyFromB64(pubKeyB64);",
							"        ",
							"          var result = {};",
							"          result.prvKeyObj = prvKey;",
							"          result.pubKeyObj = pubKey;",
							"          return result;",
							"        };",
							"        ",
							"        /**",
							"        * 加密",
							"        * @param text 待加密的字符串",
							"        * @param key 加密的key",
							"        * @param isPub 是否使用publicKey加密，默认false",
							"        * @returns {*}",
							"        */",
							"        function encrypt(text, key, isPub) {",
							"            // Encrypt with key...",
							"            var rsa = new RSAKey();",
							"            if(isPub) {",
							"              rsa.readPKCS8PubKeyFromB64(key);",
							"            } else {",
							"              rsa.readPKCS8PrvKeyFromB64(key);",
							"            }",
							"            var encrypted = rsa.encryptB64(text);",
							"            ",
							"            return encrypted;",
							"        }",
							"        ",
							"        /**",
							"        * 解密",
							"        * @param text 待解密的字符串",
							"        * @param key 解密的key",
							"        * @param isPub 是否使用publicKey解密，默认false",
							"        * @returns {*}",
							"        */",
							"        function decrypt(text, key, isPub) {",
							"            // Decrypt with key...",
							"            var rsa = new RSAKey();",
							"            if(isPub) {",
							"              rsa.readPKCS8PubKeyFromB64(key);",
							"            } else {",
							"              rsa.readPKCS8PrvKeyFromB64(key);",
							"            }",
							"            var decrypted = rsa.decryptB64(text);",
							"            ",
							"            return decrypted;",
							"        }",
							"",
							"        var sPub = new RSAKey();",
							"        sPub.readPKCS8PubKeyFromB64(SERVER_PUBLICKEY);",
							"        ",
							"        var message = 'Java中文';",
							"        // 加密前消息",
							"        console.log('加密前：', message);",
							"        // 加密",
							"        var encryptMessage = encrypt(message, sPub.getPublicBaseKeyB64(), true);",
							"        // 加密后消息",
							"        console.log('密文：', encryptMessage);",
							"        ",
							"        postman.setGlobalVariable('encryptMessage', encryptMessage);",
							"        postman.setGlobalVariable('cPub', CLIENT_PUBLICKEY);",
							"        ",
							"    });  ",
							"    ",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "030ac54c-3d47-470c-b8f7-354960b01eec",
						"type": "text/javascript",
						"exec": [
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.test(\"response is ok\", function () {",
							"    console.log('-------------------- 华丽的分割线 请求后 -----------------------');",
							"    pm.response.to.have.status(200);",
							"    pm.sendRequest({",
							"        url: 'https://cdn.bootcss.com/jsrsasign/8.0.5/jsrsasign-all-min.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"    ",
							"        var jsrsasign = res.stream.toString();",
							"        // 执行jsrsasign，加载第三方库",
							"        eval(jsrsasign);",
							"        ",
							"        // RSAKey的扩展函数",
							"        RSAKey.prototype.getPEM = function(key, pemHeader) {",
							"          return hextopem(b64nltohex(key), pemHeader);",
							"        };",
							"        ",
							"        RSAKey.prototype.encryptB64 = function (text) {",
							"          return hextob64(this.encrypt(text));",
							"        };",
							"        ",
							"        RSAKey.prototype.decryptB64 = function (text) {",
							"          return this.decrypt(b64tohex(text));",
							"        };",
							"        ",
							"        RSAKey.prototype.getPrivateBaseKey = function () {",
							"          var keyPem = KEYUTIL.getPEM(this, \"PKCS8PRV\");",
							"          return pemtohex(keyPem);",
							"        };",
							"        ",
							"        RSAKey.prototype.getPrivateBaseKeyB64 = function () {",
							"          return hextob64(this.getPrivateBaseKey());",
							"        };",
							"        ",
							"        RSAKey.prototype.getPublicBaseKey = function () {",
							"          var keyPem = KEYUTIL.getPEM(this, \"PKCS8PUB\");",
							"          return pemtohex(keyPem);",
							"        };",
							"        ",
							"        RSAKey.prototype.getPublicBaseKeyB64 = function () {",
							"          return hextob64(this.getPublicBaseKey());",
							"        };",
							"        ",
							"        RSAKey.prototype.readPKCS8PrvKeyFromB64 = function (prvKeyB64) {",
							"          var prvKeyPem = this.getPEM(prvKeyB64, \"PRIVATE KEY\");",
							"          this.readPKCS8PrvKeyHex(pemtohex(prvKeyPem));",
							"        };",
							"        ",
							"        RSAKey.prototype.readPKCS8PubKeyFromB64 = function (pubKeyB64) {",
							"          var pubKeyPem = this.getPEM(pubKeyB64, \"PUBLIC KEY\");",
							"          this.readPKCS8PubKeyHex(pemtohex(pubKeyPem));",
							"        };",
							"        ",
							"        RSAKey.readPKCS9KeypairFromB64 = function(prvKeyB64, pubKeyB64) {",
							"          var prvKey = new RSAKey();",
							"          prvKey.readPKCS8PrvKeyFromB64(prvKeyB64);",
							"          var pubKey = new RSAKey();",
							"          pubKey.readPKCS8PubKeyFromB64(pubKeyB64);",
							"        ",
							"          var result = {};",
							"          result.prvKeyObj = prvKey;",
							"          result.pubKeyObj = pubKey;",
							"          return result;",
							"        };",
							"        ",
							"        /**",
							"        * 加密",
							"        * @param text 待加密的字符串",
							"        * @param key 加密的key",
							"        * @param isPub 是否使用publicKey加密，默认false",
							"        * @returns {*}",
							"        */",
							"        function encrypt(text, key, isPub) {",
							"            // Encrypt with key...",
							"            var rsa = new RSAKey();",
							"            if(isPub) {",
							"              rsa.readPKCS8PubKeyFromB64(key);",
							"            } else {",
							"              rsa.readPKCS8PrvKeyFromB64(key);",
							"            }",
							"            var encrypted = rsa.encryptB64(text);",
							"            ",
							"            return encrypted;",
							"        }",
							"        ",
							"        /**",
							"        * 解密",
							"        * @param text 待解密的字符串",
							"        * @param key 解密的key",
							"        * @param isPub 是否使用publicKey解密，默认false",
							"        * @returns {*}",
							"        */",
							"        function decrypt(text, key, isPub) {",
							"            // Decrypt with key...",
							"            var rsa = new RSAKey();",
							"            if(isPub) {",
							"              rsa.readPKCS8PubKeyFromB64(key);",
							"            } else {",
							"              rsa.readPKCS8PrvKeyFromB64(key);",
							"            }",
							"            var decrypted = rsa.decryptB64(text);",
							"            ",
							"            return decrypted;",
							"        }",
							"       ",
							"        var cPrv = new RSAKey();",
							"        cPrv.readPKCS8PrvKeyFromB64(CLIENT_PRIVATEKEY);",
							"        ",
							"        var message = pm.response.json().result.message;",
							"        // 解密前消息",
							"        console.log('密文：', message);",
							"        // 解密",
							"        var decryptMessage = decrypt(message, cPrv.getPrivateBaseKeyB64());",
							"        // 解密后消息",
							"        console.log('解密后：', decryptMessage);",
							"        ",
							"        var expected = '服务端处理成功，客户端发送过来的内容为：Java中文';",
							"        ",
							"        pm.expect(decryptMessage).to.equal(expected);",
							"        ",
							"    });  ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "message",
							"value": "{{encryptMessage}}",
							"description": "",
							"type": "text"
						},
						{
							"key": "cPub",
							"value": "{{cPub}}",
							"description": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/rsa/rest/api/v1/send",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rsa",
						"rest",
						"api",
						"v1",
						"send"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "rsa pre-request脚本测试 jsencrypt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11612fcc-53d2-41bc-afe9-7f3920d53722",
						"type": "text/javascript",
						"exec": [
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8080/rsa/rest/api/v1/init',",
							"    method: \"POST\",",
							"}, function (err, res) {",
							"    console.log(res.json());",
							"    console.log('-------------------- 华丽的分割线 请求前 -----------------------');",
							"    pm.sendRequest({",
							"        // url: 'https://cdn.bootcss.com/jsencrypt/3.0.0-beta.1/jsencrypt.js',",
							"        url: 'http://localhost:8080/rsa/js/lib/jsencrypt/3.0.0-beta.1/jsencrypt.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"",
							"        var jsencrypt = res.stream.toString();",
							"        // 执行jsencrypt，加载第三方库",
							"        eval(jsencrypt);",
							"        ",
							"        console.log(window);",
							"        ",
							"        /**",
							"        * 加密",
							"        * @param text 待加密的字符串",
							"        * @param key 加密的key",
							"        * @param isPub 是否使用publicKey加密，默认false",
							"        * @returns {*}",
							"        */",
							"        function encrypt(text, key, isPub) {",
							"            // Encrypt with key...",
							"            var jsEncrypt = new JSEncrypt();",
							"            if (isPub) {",
							"                jsEncrypt.setPublicKey(key);",
							"            } else {",
							"                jsEncrypt.setPrivateKey(key);",
							"            }",
							"            var encrypted = jsEncrypt.encrypt(text);",
							"            ",
							"            return encrypted;",
							"        }",
							"        ",
							"        /**",
							"        * 解密",
							"        * @param text 待解密的字符串",
							"        * @param key 解密的key",
							"        * @param isPub 是否使用publicKey解密，默认false",
							"        * @returns {*}",
							"        */",
							"        function decrypt(text, key, isPub) {",
							"            // Decrypt with key...",
							"            var jsDecrypt = new JSEncrypt();",
							"            if (isPub) {",
							"                jsDecrypt.setPublicKey(key);",
							"            } else {",
							"                jsDecrypt.setPrivateKey(key);",
							"            }",
							"            var decrypted = jsDecrypt.decrypt(text);",
							"            ",
							"            return decrypted;",
							"        }",
							"",
							"        var sPub = new JSEncrypt();",
							"        sPub.setPublicKey(SERVER_PUBLICKEY);",
							"        ",
							"        var message = 'Java中文';",
							"        // 加密前消息",
							"        console.log('加密前：', message);",
							"        // 加密",
							"        var encryptMessage = encrypt(message, sPub.getPublicKeyB64(), true);",
							"        // 加密后消息",
							"        console.log('密文：', encryptMessage);",
							"        ",
							"        postman.setGlobalVariable('encryptMessage', encryptMessage);",
							"        postman.setGlobalVariable('cPub', CLIENT_PUBLICKEY);",
							"        ",
							"    });  ",
							"    ",
							"});",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_key\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "023572a8-c72f-4147-ab48-e77110d56472",
						"type": "text/javascript",
						"exec": [
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.test(\"response is ok\", function () {",
							"    console.log('-------------------- 华丽的分割线 请求后 -----------------------');",
							"    pm.response.to.have.status(200);",
							"    pm.sendRequest({",
							"        // url: 'https://cdn.bootcss.com/jsencrypt/3.0.0-beta.1/jsencrypt.js',",
							"        url: 'http://localhost:8080/rsa/js/lib/jsencrypt/3.0.0-beta.1/jsencrypt.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"",
							"        var jsencrypt = res.stream.toString();",
							"        // 执行jsencrypt，加载第三方库",
							"        eval(jsencrypt);",
							"        ",
							"        console.log('request: ', window);",
							"        ",
							"        /**",
							"        * 加密",
							"        * @param text 待加密的字符串",
							"        * @param key 加密的key",
							"        * @param isPub 是否使用publicKey加密，默认false",
							"        * @returns {*}",
							"        */",
							"        function encrypt(text, key, isPub) {",
							"            // Encrypt with key...",
							"            var jsEncrypt = new JSEncrypt();",
							"            if (isPub) {",
							"                jsEncrypt.setPublicKey(key);",
							"            } else {",
							"                jsEncrypt.setPrivateKey(key);",
							"            }",
							"            var encrypted = jsEncrypt.encrypt(text);",
							"            ",
							"            return encrypted;",
							"        }",
							"        ",
							"        /**",
							"        * 解密",
							"        * @param text 待解密的字符串",
							"        * @param key 解密的key",
							"        * @param isPub 是否使用publicKey解密，默认false",
							"        * @returns {*}",
							"        */",
							"        function decrypt(text, key, isPub) {",
							"            // Decrypt with key...",
							"            var jsDecrypt = new JSEncrypt();",
							"            if (isPub) {",
							"                jsDecrypt.setPublicKey(key);",
							"            } else {",
							"                jsDecrypt.setPrivateKey(key);",
							"            }",
							"            var decrypted = jsDecrypt.decrypt(text);",
							"            ",
							"            return decrypted;",
							"        }",
							"",
							"        var cPrv = new JSEncrypt();",
							"        cPrv.setPrivateKey(CLIENT_PRIVATEKEY);",
							"        ",
							"        var message = pm.response.json().result.message;",
							"        // 解密前消息",
							"        console.log('密文：', message);",
							"        // 解密",
							"        var decryptMessage = decrypt(message, cPrv.getPrivateKeyB64());",
							"        // 解密后消息",
							"        console.log('解密后：', decryptMessage);",
							"        ",
							"        var expected = '服务端处理成功，客户端发送过来的内容为：Java中文';",
							"        ",
							"        pm.expect(decryptMessage).to.equal(expected);",
							"        ",
							"    });  ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "message",
							"value": "{{encryptMessage}}",
							"description": "",
							"type": "text"
						},
						{
							"key": "cPub",
							"value": "{{cPub}}",
							"description": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/rsa/rest/api/v1/send",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rsa",
						"rest",
						"api",
						"v1",
						"send"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "rsa pre-request脚本测试 node-rsa",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "66b192d6-04f9-42fe-bb30-50892ca5ab34",
						"type": "text/javascript",
						"exec": [
							"var BASE64 = 'base64';",
							"var UTF8 = 'utf8';",
							"",
							"// 加密方法",
							"function encrypt(text, encryptKey) {",
							"  console.log('  encryptKey: ', encryptKey.isPublic(true));",
							"  var encrypted = encryptKey.isPublic(true) ? encryptKey.encrypt(text, BASE64) : encryptKey.encryptPrivate(text, BASE64);",
							"  return encrypted;",
							"}",
							"",
							"// 解密方法",
							"function decrypt(text, decryptKey) {",
							"  console.log('  decryptKey: ', decryptKey.isPublic(true));",
							"  var decrypted = decryptKey.isPublic(true) ? decryptKey.decryptPublic(text, UTF8) : decryptKey.decrypt(text, UTF8);",
							"  return decrypted;",
							"}",
							"",
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"var _thizpm = this;",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8080/rsa/rest/api/v1/init',",
							"    method: \"POST\",",
							"}, function (err, res) {",
							"    console.log(res.json());",
							"    console.log('-------------------- 华丽的分割线 请求前 -----------------------');",
							"",
							"    pm.sendRequest({",
							"        url: 'http://ok2471oek.bkt.clouddn.com/rsa/node-rsa/rsa-bundle.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"        var nodeRsa = res.stream.toString();",
							"        // 执行nodeRsa，加载第三方库",
							"        eval(nodeRsa);",
							"        ",
							"        console.log(_thizpm);",
							"        ",
							"        var message = 'Java中文';",
							"        // 加密前消息",
							"        console.log('加密前：', message);",
							"        // 加密",
							"        var sPub = new NodeRSA(SERVER_PUBLICKEY, 'pkcs8-public-pem');",
							"        var encryptMessage = encrypt(message, sPub);",
							"        // 加密后消息",
							"        console.log('密文：', encryptMessage);",
							"        ",
							"        // 设置变量",
							"        postman.setGlobalVariable('encryptMessage', encryptMessage);",
							"        postman.setGlobalVariable('cPub', CLIENT_PUBLICKEY); ",
							"",
							"    });",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcd91ee0-815d-40fa-9ef3-81af1cd63c13",
						"type": "text/javascript",
						"exec": [
							"var BASE64 = 'base64';",
							"var UTF8 = 'utf8';",
							"",
							"// 加密方法",
							"function encrypt(text, encryptKey) {",
							"  console.log('  encryptKey: ', encryptKey.isPublic(true));",
							"  var encrypted = encryptKey.isPublic(true) ? encryptKey.encrypt(text, BASE64) : encryptKey.encryptPrivate(text, BASE64);",
							"  return encrypted;",
							"}",
							"",
							"// 解密方法",
							"function decrypt(text, decryptKey) {",
							"  console.log('  decryptKey: ', decryptKey.isPublic(true));",
							"  var decrypted = decryptKey.isPublic(true) ? decryptKey.decryptPublic(text, UTF8) : decryptKey.decrypt(text, UTF8);",
							"  return decrypted;",
							"}",
							"",
							"var CLIENT_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCPrkLZe1AxVnhckFoF/c5BbuW86/LQE5hSynrGq2Dho9SaGqEu8QpZfhqk+w6OQaM8cdiAbakty7sjRzJ47JlGzoxHlurYKfxvo1T/3N2gXFa4H0ZpZXlG+uetyTMl06ndFl9Ji9GvxVzWW2B/RRB5tsEEkdoET3AG4V5bh1VgrQIDAQAB\";",
							"var CLIENT_PRIVATEKEY = \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI+uQtl7UDFWeFyQWgX9zkFu5bzr8tATmFLKesarYOGj1JoaoS7xCll+GqT7Do5Bozxx2IBtqS3LuyNHMnjsmUbOjEeW6tgp/G+jVP/c3aBcVrgfRmlleUb6563JMyXTqd0WX0mL0a/FXNZbYH9FEHm2wQSR2gRPcAbhXluHVWCtAgMBAAECgYBBfyukHk1xIDzf3UHcZ1WFiHsbwuc+KSCP5RNQy0DvuxIoaak+T8zq/MxCltuMx6kU3cTWzqaHZM7bBxKgAyLfamrTcFyh4rUrkMzcBEENFkRng7//Px7vzwcUocygA4KGh6eGkef6/33yhgF4wUofUWgW2qyDNQm24OitLti7oQJBAPjOijg1gl6ytRrwdqPq+S4t7Y3ZHFjiis+7yhgZMZoS2JFeVtaQbbPfXzQ4eMExGEH2/lbOuMrsrEkxRUUNGfUCQQCT1apsFYDZwIcGSQ6DStEj4X+ukw5h/q2VnfI8B2u4EqbBbpzZ5DL7lo4yDDH85xifmLl0P3SrhSDeOSa/9ODZAkEA155OZHXi3GRs1MLNXjK07VM6CnK7wT/aYjpw4j97H/XzHs+t29Zga8BJhjzmUS5Vwlzlf584wAspJ2j+id/XvQJARDWLYj8xqkaYhh/jIFS+1k1O+h9DvZciRCwR/fx2iQGiCxGcMTSHCWnXxeO2lLeTtt9ige5dSF4uYhoAdQTpUQJBANoP3JGufyUusSp7UiRX/kUg1K2rfkrzg5MLNpPuKljs3mI/xGopddBogFNomZCbssGpUM+VFvNwnhZQByx58O4=\";",
							"var SERVER_PUBLICKEY = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsrxY7zwnU8/u9a5KClEjEHDiGyMXYBJUr+il5Pw9KsVqFuhydjV7EiMBTykQ4XuZdaBWqlA7KMOio9xsL8nuMZOSu3fsmuSvMjt6gX/7kd3TQO2Tbjs8sFokJ3LPYqrhWhHCxFe52USMiKEanKbSZch1uPF1+pQHfV4zo8Mu6FQIDAQAB\";",
							"var SERVER_PRIVATEKEY = \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKyvFjvPCdTz+71rkoKUSMQcOIbIxdgElSv6KXk/D0qxWoW6HJ2NXsSIwFPKRDhe5l1oFaqUDsow6Kj3Gwvye4xk5K7d+ya5K8yO3qBf/uR3dNA7ZNuOzywWiQncs9iquFaEcLEV7nZRIyIoRqcptJlyHW48XX6lAd9XjOjwy7oVAgMBAAECgYEAk2mb506kq//j5R3RolsHizI0Jwt5qSCwXyxc/z4PxcmE5yerievG/Kto056VgjGxIgfahxWBUqVR1/uqQRas1A2j5/de8Y+LcpNrEuwF8YgOWmK3EAty0pgHQ1ezYSaxJ2AMBF427UrzMpGrB77UEzGE07GxbbC/sK/u66h0A/kCQQD89Q3OmWV8Gxie8XkWHeiUhseo3kZ9AYy7tRpsEkTkkWZAK2znphdHl35yDk0Cqu4uCe3usz6TfRlWu+3WK5k3AkEArsLXtUUt1IVeM0Z0Oxz8AWMb4v1lJiS4BhotZs7fyZ6DnMd+LIdfqQCLl9j3hCzdxEqIqmcuL2uGy1OYdfz9EwJAF+lGM9hWOoQJMMUcsBWFrbyL1Q+l1B04Y2n8JGkZsA16f+ha9A7ENpVAc6Gcb/seZqWzoxO4f5KcuZEsK0mVwwJAIp4qCJhZib2ZeWK9Z3BIYyX0wjQbs0CWy26oC7NzFQc3XvkNf1iZlGqtPDkYXrBchaOWCttBhNcx7ljy3HxuzQJAQxcxqCOUmLJah+Mtjb+aJQ2L6Lg3mBA62WNGxXDzpX2pAcJVZ7bNcsBq41rOpQEtQ8bEyj/Nfxxsxy/F57xuCQ==\";",
							"",
							"",
							"if( typeof window === \"undefined\" )",
							"  window = {};",
							"if( typeof navigator === \"undefined\" )",
							"  navigator = {};",
							"",
							"pm.test(\"response is ok\", function () {",
							"    console.log('-------------------- 华丽的分割线 请求后 -----------------------');",
							"    pm.response.to.have.status(200);",
							"   ",
							"     pm.sendRequest({",
							"        url: 'http://ok2471oek.bkt.clouddn.com/rsa/node-rsa/node-rsa.js',",
							"        method: \"GET\",",
							"    }, function (err, res) {",
							"        var nodeRsa = res.stream.toString();",
							"        // 执行nodeRsa，加载第三方库",
							"        eval(nodeRsa);",
							"        ",
							"        var message = pm.response.json().result.message;",
							"        // 解密前消息",
							"        console.log('密文：', message);",
							"        // 解密",
							"        var cPrv = new NodeRSA(CLIENT_PRIVATEKEY, 'pkcs8-private');",
							"        var decryptMessage = decrypt(message, cPrv);",
							"        // 解密后消息",
							"        console.log('解密后：', decryptMessage);",
							"        ",
							"        var expected = '服务端处理成功，客户端发送过来的内容为：Java中文';",
							"        ",
							"        pm.expect(decryptMessage).to.equal(expected);",
							"    });",
							"   ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "message",
							"value": "{{encryptMessage}}",
							"description": "",
							"type": "text"
						},
						{
							"key": "cPub",
							"value": "{{cPub}}",
							"description": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/rsa/rest/api/v1/send",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rsa",
						"rest",
						"api",
						"v1",
						"send"
					]
				},
				"description": null
			},
			"response": []
		}
	]
}